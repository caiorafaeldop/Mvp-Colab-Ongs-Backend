/**
 * Teste Completo do State Pattern
 * Testa FSM (Finite State Machine) em todos os dom√≠nios
 */

const EnhancedPaymentState = require('../src/domain/state/EnhancedPaymentState');
const CollaborationState = require('../src/domain/state/CollaborationState');
const ProjectState = require('../src/domain/state/ProjectState');
const UserState = require('../src/domain/state/UserState');

console.log('üß™ TESTE COMPLETO: STATE PATTERN COM FSM\n');
console.log('='.repeat(60));

let testsPassados = 0;
let testsFalhados = 0;

function assert(condition, message) {
  if (condition) {
    console.log(`  ‚úÖ ${message}`);
    testsPassados++;
  } else {
    console.error(`  ‚ùå ${message}`);
    testsFalhados++;
    throw new Error(`Assertion failed: ${message}`);
  }
}

// ========================================
// TESTE 1: EnhancedPaymentState
// ========================================
console.log('\nüìã TESTE 1: EnhancedPaymentState (FSM Completa)');
console.log('-'.repeat(60));

try {
  // Cria estado inicial
  let payment = new EnhancedPaymentState();
  assert(payment.getState() === 'pending', 'Estado inicial: pending');
  assert(payment.getAvailableTransitions().length > 0, 'Tem transi√ß√µes dispon√≠veis');

  // Aprova pagamento
  payment = payment.approve({ userId: '123' });
  assert(payment.getState() === 'approved', 'Transi√ß√£o pending ‚Üí approved');
  assert(payment.isSuccessful(), 'Pagamento est√° aprovado');

  // Tenta fazer chargeback
  payment = payment.chargeback({ reason: 'Fraud' });
  assert(payment.getState() === 'charged_back', 'Transi√ß√£o approved ‚Üí charged_back');
  assert(payment.isFinal(), 'Estado final alcan√ßado');

  // Valida transi√ß√£o inv√°lida
  try {
    payment.approve();
    assert(false, 'Deveria lan√ßar erro em transi√ß√£o inv√°lida');
  } catch (error) {
    assert(error.message.includes('Invalid transition'), 'Erro em transi√ß√£o inv√°lida');
  }

  // Testa webhook handling
  let webhookPayment = new EnhancedPaymentState();
  webhookPayment = webhookPayment.handleWebhookEvent('payment.approved', { amount: 100 });
  assert(webhookPayment.getState() === 'approved', 'Webhook handled corretamente');

  // Testa hist√≥rico
  assert(webhookPayment.getHistory().length === 1, 'Hist√≥rico registrado');
  
  // Testa fromMercadoPago
  const mpPayment = EnhancedPaymentState.fromMercadoPago('authorized');
  assert(mpPayment.getState() === 'approved', 'Normaliza√ß√£o Mercado Pago');

  console.log('‚úÖ TESTE 1: PASSOU');

} catch (error) {
  console.error(`‚ùå TESTE 1: FALHOU - ${error.message}`);
  testsFalhados++;
}

// ========================================
// TESTE 2: CollaborationState
// ========================================
console.log('\nüìã TESTE 2: CollaborationState');
console.log('-'.repeat(60));

try {
  // Cria colabora√ß√£o em draft
  let collab = new CollaborationState();
  assert(collab.getState() === 'draft', 'Estado inicial: draft');
  assert(collab.isEditable(), 'Draft √© edit√°vel');

  // Submete para aprova√ß√£o
  collab = collab.submit({ organizationId: '123' });
  assert(collab.getState() === 'pending', 'Transi√ß√£o draft ‚Üí pending');

  // Aprova colabora√ß√£o
  collab = collab.approve('admin123', { notes: 'Approved' });
  assert(collab.getState() === 'active', 'Transi√ß√£o pending ‚Üí active');
  assert(collab.isActive(), 'Colabora√ß√£o ativa');

  // Pausa colabora√ß√£o
  collab = collab.pause('Aguardando recursos');
  assert(collab.getState() === 'paused', 'Transi√ß√£o active ‚Üí paused');

  // Resume
  collab = collab.resume();
  assert(collab.getState() === 'active', 'Transi√ß√£o paused ‚Üí active');

  // Completa
  collab = collab.complete({ results: 'Success' });
  assert(collab.getState() === 'completed', 'Transi√ß√£o active ‚Üí completed');
  assert(collab.isFinal(), 'Estado final');

  // Testa rejei√ß√£o
  let rejectedCollab = new CollaborationState('pending');
  rejectedCollab = rejectedCollab.reject('Falta documenta√ß√£o', 'admin456');
  assert(rejectedCollab.getState() === 'rejected', 'Rejei√ß√£o funciona');
  
  // Pode reenviar ap√≥s rejei√ß√£o
  assert(rejectedCollab.canTransitionTo('pending'), 'Pode reenviar ap√≥s rejei√ß√£o');

  console.log('‚úÖ TESTE 2: PASSOU');

} catch (error) {
  console.error(`‚ùå TESTE 2: FALHOU - ${error.message}`);
  testsFalhados++;
}

// ========================================
// TESTE 3: ProjectState
// ========================================
console.log('\nüìã TESTE 3: ProjectState');
console.log('-'.repeat(60));

try {
  // Cria projeto em draft
  let project = new ProjectState();
  assert(project.getState() === 'draft', 'Estado inicial: draft');
  assert(project.isEditable(), 'Draft √© edit√°vel');

  // Publica projeto
  project = project.publish('org123', { title: 'Novo Projeto' });
  assert(project.getState() === 'published', 'Transi√ß√£o draft ‚Üí published');
  assert(project.canReceiveDonations(), 'Pode receber doa√ß√µes');

  // Inicia projeto
  project = project.start('manager123');
  assert(project.getState() === 'in_progress', 'Transi√ß√£o published ‚Üí in_progress');
  assert(project.isInProgress(), 'Projeto em progresso');

  // Coloca em espera
  project = project.hold('Aguardando aprova√ß√£o');
  assert(project.getState() === 'on_hold', 'Transi√ß√£o in_progress ‚Üí on_hold');
  assert(project.isEditable(), 'On hold √© edit√°vel');

  // Retoma
  project = project.start('manager123');
  assert(project.getState() === 'in_progress', 'Transi√ß√£o on_hold ‚Üí in_progress');

  // Completa
  project = project.complete('manager123', { outcome: 'Success' });
  assert(project.getState() === 'completed', 'Transi√ß√£o in_progress ‚Üí completed');
  assert(project.isFinalized(), 'Projeto finalizado');

  // Arquiva
  project = project.archive('admin123');
  assert(project.getState() === 'archived', 'Transi√ß√£o completed ‚Üí archived');

  // Pode republicar
  assert(project.canTransitionTo('published'), 'Pode republicar projeto arquivado');

  console.log('‚úÖ TESTE 3: PASSOU');

} catch (error) {
  console.error(`‚ùå TESTE 3: FALHOU - ${error.message}`);
  testsFalhados++;
}

// ========================================
// TESTE 4: UserState
// ========================================
console.log('\nüìã TESTE 4: UserState');
console.log('-'.repeat(60));

try {
  // Cria usu√°rio pendente
  let user = new UserState();
  assert(user.getState() === 'pending_verification', 'Estado inicial: pending_verification');
  assert(user.needsVerification(), 'Precisa verifica√ß√£o');
  assert(!user.canLogin(), 'N√£o pode fazer login');

  // Ativa usu√°rio
  user = user.activate('system', { email: 'user@example.com' });
  assert(user.getState() === 'active', 'Transi√ß√£o pending ‚Üí active');
  assert(user.isActive(), 'Usu√°rio ativo');
  assert(user.canLogin(), 'Pode fazer login');

  // Desativa por inatividade
  user = user.deactivate('Inativo por 90 dias');
  assert(user.getState() === 'inactive', 'Transi√ß√£o active ‚Üí inactive');
  assert(user.canLogin(), 'Inativo ainda pode fazer login');

  // Reativa
  user = user.activate('auto-reactivation');
  assert(user.getState() === 'active', 'Transi√ß√£o inactive ‚Üí active');

  // Suspende
  user = user.suspend('Viola√ß√£o de termos', 7 * 24 * 60 * 60 * 1000, 'admin123');
  assert(user.getState() === 'suspended', 'Transi√ß√£o active ‚Üí suspended');
  assert(user.isBlocked(), 'Usu√°rio bloqueado');
  assert(!user.canLogin(), 'N√£o pode fazer login quando suspenso');

  // Testa metadata de suspens√£o
  const history = user.getHistory();
  const suspensionRecord = history[history.length - 1];
  assert(suspensionRecord.metadata.reason === 'Viola√ß√£o de termos', 'Metadata de suspens√£o');

  // Bane usu√°rio
  let bannedUser = new UserState('suspended');
  bannedUser = bannedUser.ban('Fraude comprovada', 'admin456');
  assert(bannedUser.getState() === 'banned', 'Transi√ß√£o suspended ‚Üí banned');
  assert(bannedUser.isBlocked(), 'Usu√°rio banido est√° bloqueado');

  // Deleta
  bannedUser = bannedUser.delete('gdpr-request');
  assert(bannedUser.getState() === 'deleted', 'Transi√ß√£o banned ‚Üí deleted');
  assert(bannedUser.getAvailableTransitions().length === 0, 'Deleted √© estado final');

  console.log('‚úÖ TESTE 4: PASSOU');

} catch (error) {
  console.error(`‚ùå TESTE 4: FALHOU - ${error.message}`);
  testsFalhados++;
}

// ========================================
// TESTE 5: Valida√ß√£o de FSM
// ========================================
console.log('\nüìã TESTE 5: Valida√ß√£o de FSM (Finite State Machine)');
console.log('-'.repeat(60));

try {
  const payment = new EnhancedPaymentState();

  // Valida estrutura de transi√ß√µes
  assert(typeof payment.canTransitionTo === 'function', 'M√©todo canTransitionTo existe');
  assert(typeof payment.getAvailableTransitions === 'function', 'M√©todo getAvailableTransitions existe');
  assert(typeof payment.getHistory === 'function', 'M√©todo getHistory existe');

  // Valida transi√ß√µes dispon√≠veis
  const transitions = payment.getAvailableTransitions();
  assert(Array.isArray(transitions), 'Transi√ß√µes retorna array');
  assert(transitions.includes('approved'), 'Pending pode ir para approved');
  assert(!transitions.includes('refunded'), 'Pending n√£o pode ir para refunded');

  // Valida hist√≥rico
  const newPayment = payment.approve();
  const history = newPayment.getHistory();
  assert(history.length === 1, 'Hist√≥rico tem 1 entrada');
  assert(history[0].from === 'pending', 'Hist√≥rico: from correto');
  assert(history[0].to === 'approved', 'Hist√≥rico: to correto');
  assert(history[0].timestamp, 'Hist√≥rico: timestamp registrado');

  // Valida serializa√ß√£o
  const json = newPayment.toJSON();
  assert(json.currentState === 'approved', 'JSON: currentState');
  assert(Array.isArray(json.availableTransitions), 'JSON: availableTransitions');
  assert(Array.isArray(json.history), 'JSON: history');

  console.log('‚úÖ TESTE 5: PASSOU');

} catch (error) {
  console.error(`‚ùå TESTE 5: FALHOU - ${error.message}`);
  testsFalhados++;
}

// ========================================
// TESTE 6: Imutabilidade dos Estados
// ========================================
console.log('\nüìã TESTE 6: Imutabilidade dos Estados');
console.log('-'.repeat(60));

try {
  const original = new EnhancedPaymentState('pending');
  const approved = original.approve();

  // Verifica que o original n√£o foi modificado
  assert(original.getState() === 'pending', 'Estado original n√£o mudou');
  assert(approved.getState() === 'approved', 'Novo estado est√° correto');
  assert(original !== approved, 'S√£o inst√¢ncias diferentes');

  // Verifica hist√≥rico independente
  assert(original.getHistory().length === 0, 'Original sem hist√≥rico');
  assert(approved.getHistory().length === 1, 'Aprovado com hist√≥rico');

  console.log('‚úÖ TESTE 6: PASSOU (Estados s√£o imut√°veis)');

} catch (error) {
  console.error(`‚ùå TESTE 6: FALHOU - ${error.message}`);
  testsFalhados++;
}

// ========================================
// RESULTADO FINAL
// ========================================
console.log('\n' + '='.repeat(60));
console.log(`\nüìä RESULTADO FINAL:`);
console.log(`   ‚úÖ Testes passados: ${testsPassados}`);
console.log(`   ‚ùå Testes falhados: ${testsFalhados}`);

if (testsFalhados === 0) {
  console.log('\nüéâ TODOS OS TESTES PASSARAM!');
  console.log('\n‚úÖ STATE PATTERN: NOTA 10/10');
  console.log('\nImplementa√ß√µes completas:');
  console.log('  ‚úÖ BaseState com FSM robusta');
  console.log('  ‚úÖ EnhancedPaymentState com webhook handling');
  console.log('  ‚úÖ CollaborationState completo');
  console.log('  ‚úÖ ProjectState completo');
  console.log('  ‚úÖ UserState completo');
  console.log('  ‚úÖ Valida√ß√£o de transi√ß√µes');
  console.log('  ‚úÖ Hist√≥rico de mudan√ßas');
  console.log('  ‚úÖ Imutabilidade garantida');
  console.log('  ‚úÖ Serializa√ß√£o JSON');
  process.exit(0);
} else {
  console.log('\n‚ùå ALGUNS TESTES FALHARAM');
  process.exit(1);
}
