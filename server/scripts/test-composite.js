/**
 * Script de teste para o padr√£o Composite
 * 
 * Testa todas as funcionalidades do sistema de hierarquias de organiza√ß√µes:
 * - Cria√ß√£o de organiza√ß√µes Leaf e Composite
 * - Opera√ß√µes de √°rvore (adicionar/remover filiais)
 * - C√°lculos recursivos (produtos, doa√ß√µes)
 * - Busca e navega√ß√£o na √°rvore
 */

const mongoose = require('mongoose');
require('dotenv').config();

// Importa√ß√µes
const CompositeFactory = require('../src/main/factories/CompositeFactory');
const OrganizationCompositeService = require('../src/application/services/OrganizationCompositeService');
const RepositoryFactory = require('../src/main/factories/RepositoryFactory');
const { logger } = require('../src/infra/logger');

class CompositeTestSuite {
  constructor() {
    this.organizationRepository = RepositoryFactory.createOrganizationRepository();
    this.productRepository = RepositoryFactory.createProductRepository();
    this.donationRepository = RepositoryFactory.createDonationRepository();
    
    this.compositeService = new OrganizationCompositeService(
      this.organizationRepository,
      this.productRepository,
      this.donationRepository
    );
    
    this.testData = {};
  }

  async runAllTests() {
    try {
      console.log('üöÄ Iniciando testes do padr√£o Composite...\n');
      
      await this.connectDatabase();
      await this.cleanupTestData();
      
      // Testes b√°sicos
      await this.testCreateOrganizations();
      await this.testBuildHierarchy();
      await this.testTreeOperations();
      
      // Testes de m√©tricas
      await this.testCreateTestData();
      await this.testMetricsCalculation();
      
      // Testes avan√ßados
      await this.testSearchOperations();
      await this.testErrorHandling();
      
      console.log('\n‚úÖ Todos os testes do Composite passaram!');
      
    } catch (error) {
      console.error('\n‚ùå Erro nos testes:', error);
      throw error;
    } finally {
      await this.cleanup();
    }
  }

  async connectDatabase() {
    if (mongoose.connection.readyState === 0) {
      await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/colab-ongs');
      console.log('üì¶ Conectado ao MongoDB');
    }
  }

  async cleanupTestData() {
    // Limpar dados de teste anteriores
    await this.organizationRepository.deleteMany({ name: /^TEST_/ });
    await this.productRepository.deleteMany({ name: /^TEST_/ });
    await this.donationRepository.deleteMany({ organizationName: /^TEST_/ });
    console.log('üßπ Dados de teste limpos');
  }

  async testCreateOrganizations() {
    console.log('\nüìã Teste 1: Cria√ß√£o de organiza√ß√µes...');
    
    // Criar organiza√ß√£o matriz
    const matrixResult = await this.compositeService.createOrganization({
      name: 'TEST_Matriz_Principal',
      email: 'matriz@test.com',
      type: 'matrix'
    });
    
    this.testData.matrixId = matrixResult.data.id;
    console.log(`‚úì Matriz criada: ${matrixResult.data.name} (${matrixResult.type})`);
    
    // Criar filiais
    const filial1Result = await this.compositeService.createOrganization({
      name: 'TEST_Filial_Norte',
      email: 'norte@test.com',
      type: 'branch'
    });
    
    const filial2Result = await this.compositeService.createOrganization({
      name: 'TEST_Filial_Sul',
      email: 'sul@test.com',
      type: 'branch'
    });
    
    // Criar sub-filial
    const subFilialResult = await this.compositeService.createOrganization({
      name: 'TEST_SubFilial_A',
      email: 'subfilial@test.com',
      type: 'independent'
    });
    
    this.testData.filial1Id = filial1Result.data.id;
    this.testData.filial2Id = filial2Result.data.id;
    this.testData.subFilialId = subFilialResult.data.id;
    
    console.log(`‚úì Filiais criadas: ${filial1Result.data.name}, ${filial2Result.data.name}`);
    console.log(`‚úì Sub-filial criada: ${subFilialResult.data.name}`);
  }

  async testBuildHierarchy() {
    console.log('\nüå≥ Teste 2: Constru√ß√£o de hierarquia...');
    
    // Adicionar filiais √† matriz
    await this.compositeService.addChildOrganization(this.testData.matrixId, this.testData.filial1Id);
    await this.compositeService.addChildOrganization(this.testData.matrixId, this.testData.filial2Id);
    
    // Adicionar sub-filial √† filial1
    await this.compositeService.addChildOrganization(this.testData.filial1Id, this.testData.subFilialId);
    
    console.log('‚úì Hierarquia constru√≠da: Matriz ‚Üí Filiais ‚Üí Sub-filial');
    
    // Verificar √°rvore
    const treeResult = await this.compositeService.getOrganizationTree(this.testData.matrixId);
    console.log('\nüìä Estrutura da √°rvore:');
    console.log(treeResult.data.display);
    
    console.log(`‚úì Total de organiza√ß√µes na √°rvore: ${treeResult.data.totalOrganizations}`);
  }

  async testTreeOperations() {
    console.log('\nüîß Teste 3: Opera√ß√µes na √°rvore...');
    
    // Buscar organiza√ß√£o na √°rvore
    const searchResult = await this.compositeService.findOrganizationInTree(
      this.testData.matrixId, 
      this.testData.subFilialId
    );
    
    console.log(`‚úì Sub-filial encontrada na √°rvore: ${searchResult.data.name}`);
    console.log(`‚úì Caminho: ${searchResult.data.path.map(p => p.name).join(' ‚Üí ')}`);
    
    // Testar remo√ß√£o e re-adi√ß√£o
    await this.compositeService.removeChildOrganization(this.testData.filial1Id, this.testData.subFilialId);
    console.log('‚úì Sub-filial removida da Filial Norte');
    
    await this.compositeService.addChildOrganization(this.testData.filial2Id, this.testData.subFilialId);
    console.log('‚úì Sub-filial movida para Filial Sul');
  }

  async testCreateTestData() {
    console.log('\nüì¶ Teste 4: Cria√ß√£o de dados para m√©tricas...');
    
    // Criar produtos para cada organiza√ß√£o
    const organizations = [
      { id: this.testData.matrixId, name: 'TEST_Matriz_Principal', products: 2 },
      { id: this.testData.filial1Id, name: 'TEST_Filial_Norte', products: 3 },
      { id: this.testData.filial2Id, name: 'TEST_Filial_Sul', products: 1 },
      { id: this.testData.subFilialId, name: 'TEST_SubFilial_A', products: 2 }
    ];
    
    for (const org of organizations) {
      for (let i = 1; i <= org.products; i++) {
        await this.productRepository.create({
          name: `TEST_Produto_${org.name}_${i}`,
          description: `Produto de teste ${i}`,
          organizationId: org.id,
          organizationName: org.name,
          price: Math.random() * 100
        });
      }
      console.log(`‚úì ${org.products} produtos criados para ${org.name}`);
    }
    
    // Criar doa√ß√µes para cada organiza√ß√£o
    for (const org of organizations) {
      const donations = Math.floor(Math.random() * 3) + 1;
      for (let i = 1; i <= donations; i++) {
        await this.donationRepository.create({
          amount: Math.floor(Math.random() * 500) + 50,
          organizationId: org.id,
          organizationName: org.name,
          donorName: `Doador Teste ${i}`,
          donorEmail: `doador${i}@test.com`,
          type: 'single'
        });
      }
      console.log(`‚úì ${donations} doa√ß√µes criadas para ${org.name}`);
    }
  }

  async testMetricsCalculation() {
    console.log('\nüìä Teste 5: C√°lculo de m√©tricas...');
    
    // M√©tricas da matriz (deve incluir todas as filiais)
    const matrixMetrics = await this.compositeService.getOrganizationMetrics(this.testData.matrixId);
    console.log('\nüìà M√©tricas da Matriz (recursivas):');
    console.log(`  ‚Ä¢ Total de organiza√ß√µes: ${matrixMetrics.data.totalOrganizations}`);
    console.log(`  ‚Ä¢ Total de produtos: ${matrixMetrics.data.totalProducts}`);
    console.log(`  ‚Ä¢ Total de doa√ß√µes: R$ ${matrixMetrics.data.totalDonations.toFixed(2)}`);
    console.log(`  ‚Ä¢ M√©dia produtos/org: ${matrixMetrics.data.metrics.averageProductsPerOrg}`);
    console.log(`  ‚Ä¢ M√©dia doa√ß√µes/org: R$ ${matrixMetrics.data.metrics.averageDonationsPerOrg}`);
    
    // M√©tricas de uma filial
    const filialMetrics = await this.compositeService.getOrganizationMetrics(this.testData.filial2Id);
    console.log('\nüìà M√©tricas da Filial Sul (com sub-filial):');
    console.log(`  ‚Ä¢ Total de organiza√ß√µes: ${filialMetrics.data.totalOrganizations}`);
    console.log(`  ‚Ä¢ Total de produtos: ${filialMetrics.data.totalProducts}`);
    console.log(`  ‚Ä¢ Total de doa√ß√µes: R$ ${filialMetrics.data.totalDonations.toFixed(2)}`);
    
    console.log('‚úì M√©tricas calculadas corretamente');
  }

  async testSearchOperations() {
    console.log('\nüîç Teste 6: Opera√ß√µes de busca...');
    
    // Listar todas as matrizes
    const matricesResult = await this.compositeService.getAllMatrixOrganizations();
    console.log(`‚úì ${matricesResult.total} organiza√ß√µes matrizes encontradas`);
    
    // Verificar se nossa matriz de teste est√° na lista
    const ourMatrix = matricesResult.data.find(m => m.name === 'TEST_Matriz_Principal');
    if (ourMatrix) {
      console.log(`‚úì Nossa matriz encontrada com ${ourMatrix.totalOrganizations} organiza√ß√µes`);
    }
    
    // Buscar organiza√ß√£o espec√≠fica
    const searchResult = await this.compositeService.findOrganizationInTree(
      this.testData.matrixId,
      this.testData.filial1Id
    );
    
    if (searchResult.success) {
      console.log(`‚úì Filial encontrada: ${searchResult.data.name}`);
    }
  }

  async testErrorHandling() {
    console.log('\n‚ö†Ô∏è  Teste 7: Tratamento de erros...');
    
    try {
      // Tentar criar organiza√ß√£o com dados inv√°lidos
      await this.compositeService.createOrganization({
        name: '',
        email: 'email-inv√°lido'
      });
      console.log('‚ùå Deveria ter falhado com dados inv√°lidos');
    } catch (error) {
      console.log('‚úì Erro capturado corretamente para dados inv√°lidos');
    }
    
    try {
      // Tentar buscar organiza√ß√£o inexistente
      await this.compositeService.getOrganizationTree('507f1f77bcf86cd799439011');
      console.log('‚ùå Deveria ter falhado com ID inexistente');
    } catch (error) {
      console.log('‚úì Erro capturado corretamente para ID inexistente');
    }
    
    try {
      // Tentar criar ciclo na hierarquia
      await this.compositeService.addChildOrganization(this.testData.subFilialId, this.testData.matrixId);
      console.log('‚ùå Deveria ter falhado ao criar ciclo');
    } catch (error) {
      console.log('‚úì Erro capturado corretamente para ciclo na hierarquia');
    }
  }

  async cleanup() {
    console.log('\nüßπ Limpeza final...');
    await this.cleanupTestData();
    
    if (mongoose.connection.readyState === 1) {
      await mongoose.connection.close();
      console.log('üì¶ Conex√£o com MongoDB fechada');
    }
  }
}

// Executar testes se chamado diretamente
if (require.main === module) {
  const testSuite = new CompositeTestSuite();
  
  testSuite.runAllTests()
    .then(() => {
      console.log('\nüéâ Testes do Composite conclu√≠dos com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• Testes falharam:', error);
      process.exit(1);
    });
}

module.exports = CompositeTestSuite;
