📁 ESTRUTURA DO PROJETO - COLAB BACKEND
==========================================

server/
├── 📁 docs/                          # Documentação
├── 📁 prisma/                        # Schema e configurações Prisma
├── 📁 public/                        # Arquivos públicos
├── 📁 src/                          # Código fonte principal
│   ├── 📁 application/              # Camada de Aplicação
│   │   └── 📁 services/             # Services de aplicação
│   ├── 📁 domain/                   # Camada de Domínio
│   │   ├── 📁 contracts/            # Interfaces e contratos
│   │   ├── 📁 entities/             # Entidades de domínio
│   │   ├── 📁 repositories/         # Interfaces de repositórios
│   │   ├── 📁 singletons/           # Interfaces de singletons
│   │   └── 📁 validators/           # Validadores de domínio
│   ├── 📁 infra/                    # Camada de Infraestrutura
│   │   ├── 📁 adapters/             # Adapters (Cloudinary, OpenAI, etc.)
│   │   ├── 📁 bridges/              # Bridges para integração
│   │   ├── 📁 database/             # Configurações de banco
│   │   │   └── 📁 models/           # Modelos de dados
│   │   ├── 📁 decorators/           # Decorators
│   │   ├── 📁 events/               # Sistema de eventos
│   │   ├── 📁 facades/              # Facades
│   │   ├── 📁 observers/            # Observers
│   │   ├── 📁 repositories/         # Implementações de repositórios
│   │   ├── 📁 services/             # Services de infraestrutura
│   │   ├── 📁 singletons/           # Implementações de singletons
│   │   └── 📁 strategies/           # Strategies
│   ├── 📁 main/                     # Configuração principal
│   │   ├── 📁 config/               # Configurações (Swagger, DB, etc.)
│   │   ├── 📁 factories/            # Factories (Repository, Service, etc.)
│   │   └── 📁 routes/               # Configuração de rotas
│   └── 📁 presentation/             # Camada de Apresentação
│       ├── 📁 controllers/          # Controllers HTTP
│       ├── 📁 middleware/           # Middlewares
│       └── 📁 routes/               # Definição de rotas
├── 📁 tests/                        # Testes
└── 📄 Arquivos principais:
    ├── server.js                    # Servidor principal
    ├── package.json                 # Dependências
    ├── .env                         # Variáveis de ambiente
    ├── .gitignore                   # Arquivos ignorados
    ├── FACTORY.txt                  # Análise do padrão Factory
    ├── PROJECT-TREE.txt             # Este arquivo
    └── Arquivos de teste HTML

🎯 PADRÕES DE PROJETO IMPLEMENTADOS:
=====================================

📁 FACTORIES (src/main/factories/):
├── RepositoryFactory.js             # Factory para repositórios
├── ServiceFactory.js                # Factory para services
├── PrismaRepositoryFactory.js       # Factory com Prisma + MongoDB
├── AdapterFactory.js                # Factory para adapters
├── StrategyFactory.js               # Factory para strategies
└── index.js (AppFactory)            # Factory principal

📁 REPOSITORIES (src/infra/repositories/):
├── MongoUserRepository.js           # Repository MongoDB para usuários
├── MongoProductRepository.js        # Repository MongoDB para produtos
├── PrismaUserRepository.js          # Repository Prisma para usuários
└── PrismaDonationRepository.js      # Repository Prisma para doações

📁 SERVICES (src/infra/services/):
├── EnhancedJwtAuthService.js        # Service de autenticação completo
├── SimpleJwtAuthService.js          # Service de autenticação simples
└── DonationService.js               # Service para doações

📁 ADAPTERS (src/infra/adapters/):
├── CloudinaryAdapter.js             # Adapter para Cloudinary
├── OpenAIAdapter.js                 # Adapter para OpenAI
└── SimpleMercadoPagoAdapter.js      # Adapter para Mercado Pago

📁 STRATEGIES (src/infra/strategies/):
├── LocationMatchingStrategy.js      # Strategy para matching por localização
├── CauseMatchingStrategy.js         # Strategy para matching por causa
└── ResourceMatchingStrategy.js      # Strategy para matching por recurso

📁 SINGLETONS (src/infra/singletons/):
├── DatabaseService.js               # Singleton para MongoDB
└── PrismaService.js                 # Singleton para Prisma

🚀 ARQUITETURA CLEAN ARCHITECTURE:
==================================

Domain Layer (Regras de Negócio)
    ↓
Application Layer (Casos de Uso)
    ↓
Infrastructure Layer (Implementações)
    ↓
Presentation Layer (Controllers/Routes)

✅ BENEFÍCIOS DA ESTRUTURA:
===========================
- Separação clara de responsabilidades
- Fácil manutenção e extensão
- Testabilidade alta
- Baixo acoplamento
- Alta coesão
- Padrões de projeto bem implementados
- Suporte a múltiplos bancos (MongoDB + Prisma)
- Sistema de pagamentos integrado (Mercado Pago)
- Upload de arquivos (Cloudinary)
- Sistema de autenticação robusto

Data: 29/09/2025
Projeto: MVP Colaboração entre ONGs
