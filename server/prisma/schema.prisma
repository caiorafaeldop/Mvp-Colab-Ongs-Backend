// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// User model - Usuários do sistema (administradores das ONGs)
model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   // Nome da ONG
  email     String   @unique
  password  String
  userType  String   @default("organization") // Sempre 'organization' agora
  phone     String?
  emailVerified Boolean  @default(false) // Se o email foi verificado
  
  // Dados específicos da ONG
  description String?  // Descrição da ONG
  pixKey      String?  // Chave PIX para doações
  address     String?  // Endereço da ONG
  website     String?  // Site da ONG
  
  // Mercado Pago
  mercadoPagoAccessToken String? // Token de acesso do Mercado Pago
  mercadoPagoUserId      String? // ID do usuário no Mercado Pago
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos simplificados
  products         Product[]         @relation("UserProducts")
  prestacoesContas PrestacaoContas[] @relation("OrganizationPrestacoes")

  @@map("users")
}

// Product model - Produtos/Serviços oferecidos pelas organizações
model Product {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  description      String
  price            Float
  imageUrls        String[] // Array de URLs das imagens
  organizationId   String   @db.ObjectId
  organizationName String
  isAvailable      Boolean  @default(true)
  category         String?
  stock            Int      @default(1)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relacionamentos
  organization User @relation("UserProducts", fields: [organizationId], references: [id])

  @@map("products")
}

// Donation model - Doações via Mercado Pago (UMA ONG)
model Donation {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Dados da doação
  amount            Float    // Valor da doação
  currency          String   @default("BRL")
  type              String   @default("single") // 'single' ou 'recurring'
  frequency         String?  // 'monthly', 'weekly', 'yearly' (para recorrentes)
  message           String?  // Mensagem do doador
  
  // Dados do doador (obrigatórios para transparência)
  donorName         String   // Nome completo
  donorEmail        String   // Email para contato
  donorPhone        String?  // Telefone opcional
  donorDocument     String?  // CPF opcional
  donorAddress      String?  // Endereço opcional
  donorCity         String?  // Cidade opcional
  donorState        String?  // Estado opcional
  donorZipCode      String?  // CEP opcional
  
  // Mercado Pago
  mercadoPagoId     String?  // ID da transação no Mercado Pago
  subscriptionId    String?  // ID da assinatura (para recorrentes)
  paymentStatus     String   @default("pending") // pending, approved, rejected, cancelled
  paymentMethod     String?  // credit_card, debit_card, pix, etc.
  
  // Controle interno
  isAnonymous       Boolean  @default(false) // Se doador quer ficar anônimo
  showInPublicList  Boolean  @default(true)  // Se pode aparecer na lista pública
  
  // Metadados
  metadata          Json     @default("{}")
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([mercadoPagoId])
  @@map("donations")
}

// Collaboration model
model Collaboration {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("collaborations")
}

// Notification model
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@map("notifications")
}

// File model
model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  filename  String
  originalName String
  mimetype  String
  size      Int
  url       String
  ownerId   String   @db.ObjectId
  ownerType String   // 'user', 'product', 'organization'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("files")
}

// COMPOSITE PATTERN - Organization Hierarchy
model Organization {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  description String?
  type        String   @default("independent") // 'matrix', 'branch', 'independent'
  
  // Composite Pattern - Hierarchy
  parentId    String?  @db.ObjectId
  parent      Organization?  @relation("OrganizationHierarchy", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children    Organization[] @relation("OrganizationHierarchy")
  
  // Metadata
  adminUserId String?  @db.ObjectId
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([parentId])
  @@index([type])
  @@map("organizations")
}

// TopDonor model - Doadores de destaque do mês
model TopDonor {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Dados do doador
  donorName       String   // Nome do doador
  
  // Ranking
  topPosition     Int      // Colocação no top (1, 2, 3, etc.)
  
  // Dados da doação
  donatedAmount   Float    // Valor doado
  donationType    String   // 'single' (única), 'recurring' (recorrente), 'total' (acumulado)
  donationDate    DateTime // Data da doação ou data de referência
  
  // Instituição (opcional)
  organizationId  String?  @db.ObjectId // ID da organização beneficiada
  organizationName String? // Nome da organização (desnormalizado para performance)
  
  // Período de referência
  referenceMonth  Int      // Mês de referência (1-12)
  referenceYear   Int      // Ano de referência (2024, 2025, etc.)
  
  // Metadados
  metadata        Json?    @default("{}")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Índices para queries eficientes
  @@index([referenceYear, referenceMonth])
  @@index([topPosition])
  @@index([organizationId])
  @@map("topDonors")
}

// Supporter model - Colaboradores/Apoiadores exibidos na Home
model Supporter {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  imageUrl    String?
  description String?
  website     String?
  order       Int      @default(0)
  visible     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([visible])
  @@index([order])
  @@map("supporters")
}

// PrestacaoContas model - Prestação de Contas com estrutura flexível tipo planilha
model PrestacaoContas {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // Estrutura flexível - JSON com dados da planilha
  // Cada linha é um objeto com colunas dinâmicas
  linhas            Json     // Array de objetos: [{ col1: "valor", col2: 123, ... }]
  
  // Definição das colunas (cabeçalhos)
  colunas           Json     // Array de objetos: [{ id: "col1", nome: "CREDOR", tipo: "text" }, ...]
  
  // Metadados da planilha
  titulo            String   @default("Prestação de Contas")
  ano               Int      @default(2025)
  mes               Int?     // Opcional: mês específico (retrocompatibilidade)
  mesInicial        Int?     // Mês inicial do período
  mesFinal          Int?     // Mês final do período
  
  // Configurações de exibição
  mostrarTotal      Boolean  @default(true)
  colunasTotal      Json?    // Array com IDs das colunas que devem ser somadas no total
  
  // Relacionamento com a organização
  organizationId    String   @db.ObjectId
  organization      User     @relation("OrganizationPrestacoes", fields: [organizationId], references: [id])
  
  // Campos antigos (opcional para compatibilidade retroativa)
  descricao         String?
  orgaoDoador       String?
  valor             Float?
  data              DateTime?
  categoria         String?
  tipoDespesa       String?
  
  // Metadados
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([organizationId])
  @@index([categoria])
  @@index([data])
  @@map("prestacaocontas")
}

// FAQ model - Perguntas Frequentes
model FAQ {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  pergunta  String
  resposta  String
  ordem     Int      @default(0) // Para ordenar as perguntas
  ativo     Boolean  @default(true) // Para ativar/desativar
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ativo])
  @@index([ordem])
  @@map("faqs")
}

// Testimonial model - Depoimentos
model Testimonial {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  nome      String
  cargo     String   // Filiação, cargo, função, etc. (ex: "Voluntária", "Doadora", "Presidente")
  depoimento String
  fotoUrl   String?  // URL da foto da pessoa
  ordem     Int      @default(0) // Para ordenar os depoimentos
  ativo     Boolean  @default(true) // Para ativar/desativar
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ativo])
  @@index([ordem])
  @@map("testimonials")
}

// VerificationCode model - Códigos de verificação de email e recuperação de senha
model VerificationCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   // Email do usuário
  code      String   // Código de 6 dígitos
  type      String   // 'email_verification' ou 'password_reset'
  expiresAt DateTime // Data de expiração do código
  used      Boolean  @default(false) // Se o código já foi usado
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, type])
  @@index([code])
  @@index([expiresAt])
  @@map("verification_codes")
}
