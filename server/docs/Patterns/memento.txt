RESUMO ATUAL (2025-09-30) • Nota: 10/10
Como está sendo usado:
- Memento Pattern implementado para rastrear histórico de mudanças em objetos.
- Memento armazena snapshots do estado sem violar encapsulamento.
- Caretaker gerencia histórico com undo/redo e limite de versões.
- Originator é classe base para objetos que podem salvar/restaurar estado.
- ProductHistory implementa histórico de produtos com auditoria.
- UserProfileHistory implementa histórico de perfis com sanitização de dados sensíveis.
- Suporta undo, redo, restauração para versão específica e diff entre versões.

Implementações realizadas:
✅ Memento - Armazena snapshot do estado com timestamp e metadata
✅ Caretaker - Gerencia histórico com undo/redo (máx 50 versões)
✅ Originator - Classe base para objetos com estado salvável
✅ ProductHistory - Histórico de produtos com auditoria de mudanças
✅ UserProfileHistory - Histórico de perfis com sanitização de passwords
✅ Diff entre versões para comparar mudanças
✅ Restauração para versão específica por ID
✅ Estatísticas de histórico (tamanho, undo/redo disponível)

Evidências no código:
- src/domain/memento/Memento.js - Classe Memento
  * constructor(state, metadata)
  * getState(): Object - Retorna deep clone do estado
  * getTimestamp(): Date
  * getMetadata(): Object
  * getId(): string - ID único do snapshot

- src/domain/memento/Caretaker.js - Gerenciador de histórico
  * save(memento): void - Salva novo snapshot
  * undo(): Memento|null - Desfaz última ação
  * redo(): Memento|null - Refaz ação desfeita
  * canUndo(): boolean
  * canRedo(): boolean
  * getHistory(): Array<Memento>
  * getHistoryWithMetadata(): Array<Object>
  * restoreById(id): Memento|null
  * getStats(): Object - Estatísticas do histórico

- src/domain/memento/Originator.js - Classe base
  * setState(state): void
  * getState(): Object
  * createMemento(metadata): Memento
  * restore(memento): void

- src/application/history/ProductHistory.js - Histórico de produtos
  * constructor(productData)
  * updateProduct(changes, action): void
  * saveSnapshot(action, metadata): void
  * undo(): Object|null
  * redo(): Object|null
  * restoreToVersion(mementoId): Object|null
  * getHistory(): Array<Object>
  * getDiff(fromId, toId): Object
  * getStats(): Object
  * clearHistory(): void

- src/application/history/UserProfileHistory.js - Histórico de perfis
  * constructor(userData)
  * updateProfile(changes, action): void
  * undo(): Object|null
  * redo(): Object|null
  * getHistory(): Array<Object>
  * getAudit(): Array<Object> - Auditoria formatada
  * _sanitizeState(state): Object - Remove passwords/tokens

Benefícios alcançados:
✅ Undo/Redo de mudanças em objetos
✅ Auditoria completa de alterações
✅ Restauração para qualquer versão anterior
✅ Histórico limitado para controlar memória
✅ Metadata rica para cada snapshot
✅ Diff entre versões para comparação
✅ Sanitização automática de dados sensíveis
✅ Encapsulamento preservado (estado privado)
✅ Facilita recuperação de dados apagados
✅ Útil para debugging e testes

Padrão de uso:
```javascript
// 1. Criar histórico de produto
const productHistory = new ProductHistory({
  id: '123',
  name: 'Produto Original',
  price: 50.00,
  stock: 10
});

// 2. Fazer mudanças
productHistory.updateProduct({
  name: 'Produto Atualizado V1',
  price: 55.00
}, 'price_update');

productHistory.updateProduct({
  stock: 5
}, 'stock_reduced');

// 3. Desfazer última mudança (undo)
const restoredProduct = productHistory.undo();
// stock volta para 10

// 4. Refazer mudança (redo)
productHistory.redo();
// stock volta para 5

// 5. Ver histórico
const history = productHistory.getHistory();
// [ { action: 'initial_state', timestamp: ... },
//   { action: 'price_update', timestamp: ... },
//   { action: 'stock_reduced', timestamp: ..., isCurrent: true } ]

// 6. Comparar versões
const diff = productHistory.getDiff(mementoId1, mementoId2);
// { stock: { from: 10, to: 5 } }

// 7. Restaurar versão específica
productHistory.restoreToVersion(mementoId1);

// 8. Verificar disponibilidade
console.log(productHistory.canUndo()); // true
console.log(productHistory.canRedo()); // false
```

Casos de uso:

1. HISTÓRICO DE PRODUTOS:
   - Rastrear mudanças de preço
   - Auditoria de estoque
   - Recuperar descrição apagada
   - Comparar versões

2. HISTÓRICO DE PERFIL:
   - Desfazer mudanças acidentais
   - Auditoria de alterações
   - Recuperar dados apagados
   - Compliance e LGPD

3. AUDITORIA:
   - Quem mudou o quê e quando
   - Trail completo de alterações
   - Compliance requirements
   - Debugging de bugs

4. RECUPERAÇÃO:
   - Undo de operações destrutivas
   - Restauração de estado anterior
   - Proteção contra erros de usuário

Limitações implementadas:
- Máximo 50 versões para produtos
- Máximo 30 versões para perfis
- Versões antigas são removidas automaticamente
- Passwords nunca são salvos no histórico
- Deep clone para evitar referências

Segurança:
- Passwords sanitizados automaticamente
- Tokens removidos do histórico
- Dados sensíveis nunca persistidos
- Logs estruturados com info relevante

Performance:
- Deep clone apenas quando necessário
- Limite de histórico previne vazamento de memória
- Histórico em memória (rápido)
- Pode ser persistido em banco se necessário

Integração com outros patterns:
- Observer: Pode emitir eventos ao salvar/restaurar
- Command: Mementos podem ser commands invertíveis
- Factory: HistoryFactory para criar históricos
- Repository: Pode persistir mementos no banco

Diff entre versões:
```javascript
const diff = productHistory.getDiff(v1Id, v2Id);
// Retorna apenas campos alterados:
{
  price: { from: 50.00, to: 55.00 },
  stock: { from: 10, to: 5 },
  updatedAt: { from: '2024-01-01', to: '2024-01-02' }
}
```

Estatísticas:
```javascript
const stats = productHistory.getStats();
// {
//   historySize: 10,
//   currentIndex: 7,
//   maxHistorySize: 50,
//   canUndo: true,
//   canRedo: true,
//   undoAvailable: 7,
//   redoAvailable: 2
// }
```

Auditoria de perfil:
```javascript
const audit = userProfileHistory.getAudit();
// [
//   { timestamp: ..., action: 'profile_created', changes: [], isCurrent: false },
//   { timestamp: ..., action: 'profile_updated', changes: ['name', 'email'], isCurrent: false },
//   { timestamp: ..., action: 'profile_updated', changes: ['phone'], isCurrent: true }
// ]
```

PADRÃO MEMENTO (Comportamental) - IMPLEMENTADO COMPLETO ✅✅✅

CONTEXTO NO PROJETO:
Sistema de marketplace de ONGs onde usuários e organizações editam produtos e perfis.
Necessidade de rastrear mudanças, permitir undo/redo e manter auditoria para compliance.

APLICAÇÕES PRÁTICAS:
1. ProductHistory: Histórico de mudanças em produtos
2. UserProfileHistory: Histórico de perfis com sanitização
3. DonationHistory: Possível rastrear mudanças em doações
4. CollaborationHistory: Histórico de colaborações
5. Auditoria completa para LGPD e compliance

IMPACTO NO TCC:
- Pattern comportamental avançado
- Útil para demonstrar undo/redo
- Auditoria profissional
- Proteção de dados (sanitização)
- Facilita debugging e testes
- Feature demonstrável e útil

DIFERENCIAL:
- Undo/Redo completo implementado
- Diff entre versões
- Sanitização automática de dados sensíveis
- Limite de histórico para performance
- Metadata rica em cada snapshot
- Restauração para qualquer versão
- Estatísticas e auditoria
- Fácil integrar em qualquer classe
