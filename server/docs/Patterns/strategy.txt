RESUMO ATUAL (2025-09-29) • Nota: 4/10
Como está sendo usado:
- `src/main/factories/PrismaRepositoryFactory.js` alterna entre Prisma/Mongo por estratégia (habilitável via `switchDatabaseStrategy`), mas no boot atual usa `MongoRepositoryFactory`.
- `BridgeFactory.getStorageBridge(preference)` e `AdapterFactory.create*` selecionam implementação (similar a Strategy, embora aplicado via Factory/Bridge).
Melhorias sugeridas:
- Ativar/usar estratégia de repositório no startup quando Prisma estiver pronto.
- Extrair estratégias explícitas para matching/pagamentos com contratos dedicados.
Evidências no código:
- `PrismaRepositoryFactory._shouldUsePrisma()`, `switchDatabaseStrategy()`; `BridgeFactory.getStorageBridge()`.

PADRÃO STRATEGY (Comportamental) - IMPLEMENTADO ✅

CONTEXTO NO PROJETO:
O projeto implementa o padrão Strategy para algoritmos de matching entre ONGs e processamento de pagamentos.
Permite escolher dinamicamente diferentes estratégias baseadas no contexto e necessidades.

IMPLEMENTAÇÕES REALIZADAS:

1. **MATCHING STRATEGIES** ✅
   - LocationMatchingStrategy: Matching por proximidade geográfica
   - CauseMatchingStrategy: Matching por causas similares/complementares  
   - ResourceMatchingStrategy: Matching por recursos disponíveis/necessários

2. **PAYMENT STRATEGIES** ✅
   - WhatsAppPaymentStrategy: Pagamento via WhatsApp com links automáticos
   - Suporte para múltiplos métodos de pagamento

3. **RECOMMENDATION STRATEGIES** ✅
   - CategoryRecommendationStrategy: Recomendações baseadas em categorias
   - Algoritmos de sugestão de produtos

4. **STRATEGY FACTORY** ✅
   - Criação centralizada de estratégias
   - Configuração via environment variables
   - Seleção dinâmica baseada em contexto

ESTRUTURA IMPLEMENTADA:
```
src/domain/contracts/
  ├── MatchingStrategy.js
  ├── PaymentStrategy.js
  └── RecommendationStrategy.js

src/infra/strategies/
  ├── LocationMatchingStrategy.js
  ├── CauseMatchingStrategy.js
  ├── ResourceMatchingStrategy.js
  ├── WhatsAppPaymentStrategy.js
  └── CategoryRecommendationStrategy.js

src/main/factories/
  └── StrategyFactory.js
```

ALGORITMOS DE MATCHING IMPLEMENTADOS:

📍 **LocationMatchingStrategy:**
- Cálculo de distância com fórmula de Haversine
- Bonus para mesmo estado (30%) e mesma cidade (50%)
- Considera proximidade até 100km
- Score baseado em proximidade geográfica

🎯 **CauseMatchingStrategy:**
- Matches exatos entre causas (80% bonus)
- Causas relacionadas mapeadas (50% bonus)
- Causas complementares (60% bonus)
- Análise de público-alvo similar

💼 **ResourceMatchingStrategy:**
- Matching direto: necessidades vs disponibilidades
- Matching reverso: ofertas vs necessidades
- Complementaridade mútua (bonus 30%)
- Análise de capacidade organizacional

BENEFÍCIOS ALCANÇADOS:
- ✅ Algoritmos intercambiáveis sem afetar código cliente
- ✅ Fácil adição de novas estratégias de matching
- ✅ Configuração dinâmica via environment variables
- ✅ Otimização específica por tipo de tarefa
- ✅ Estimativa de custos e performance
- ✅ Validação de dados por estratégia

USO PRÁTICO:
```javascript
// Criação dinâmica de estratégias
const causeStrategy = StrategyFactory.createMatchingStrategy('cause');
const paymentStrategy = StrategyFactory.createPaymentStrategy('whatsapp');
const recommendationStrategy = StrategyFactory.createRecommendationStrategy('category');

// Uso das estratégias
const matches = await causeStrategy.findMatches(ong, candidates);
const paymentLink = await paymentStrategy.processPayment(paymentDetails);
const recommendations = await recommendationStrategy.getRecommendations(user);
```
