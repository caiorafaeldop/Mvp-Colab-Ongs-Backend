RESUMO ATUAL (2025-09-29) • Nota: 2/10
Como está sendo usado:
- Não há classes base com passos imutáveis e ganchos. Fluxos (upload, autenticação, doações) são codificados diretamente em services/controllers.
Melhorias sugeridas:
- Criar templates para: upload (validar→processar→salvar), autenticação (validar→verificar→emitir tokens) e geração de relatórios.
Evidências no código:
- `DonationService.create*` e middlewares mostram fluxo repetitivo, mas sem Template Method explícito.

PADRÃO TEMPLATE METHOD (Comportamental)

CONTEXTO NO PROJETO:
- Geração de relatórios com estrutura comum mas conteúdo específico
- Processamento de uploads com etapas padronizadas
- Validação de dados com fluxo comum

APLICAÇÃO PRÁTICA:
1. ReportTemplate - estrutura base para relatórios de ONGs
2. UploadProcessTemplate - fluxo padrão de upload (validar, processar, salvar)
3. AuthenticationTemplate - fluxo de autenticação (validar, verificar, gerar token)
4. ValidationTemplate - estrutura comum de validação de entidades
5. EmailTemplate - template para diferentes tipos de email

BENEFÍCIOS:
- Reutilização de código comum
- Padronização de processos
- Facilita manutenção e extensão
