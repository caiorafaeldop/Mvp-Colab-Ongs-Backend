## Avaliação Atual — State (2025-09-30)
 - Nota: 10/10
 - Pontos fortes: BaseState com FSM robusta, estados para Payment/Collaboration/Project/User, validação de transições, histórico, imutabilidade, webhook handling.
 - Implementado: FSM completa com validação, 5 estados especializados, histórico de transições, serialização JSON, testes completos.
 - Status: Implementado completamente
 
RESUMO ATUAL (2025-09-29) • Nota: 7/10
Como está sendo usado:
- `src/domain/state/PaymentState.js` normaliza estados do Mercado Pago e provê transições (`next`, `fromMercadoPago`).
- Usado no `DonationService` ao gravar `paymentStatus` e nas atualizações via webhook.
Melhorias sugeridas:
- Usar `next()` nas mudanças de estado em vez de set direto; aplicar em outros domínios (colaborações/produtos).
Evidências no código:
- `DonationService.updateDonationStatus()` e `updateSubscriptionStatus()` usam `PaymentState.fromMercadoPago()`.

PADRÃO STATE (Comportamental)

CONTEXTO NO PROJETO:
- Estados de colaboração entre ONGs (pendente, ativa, concluída, cancelada)
- Status de projetos (rascunho, publicado, em andamento, finalizado)
- Estados de usuário (ativo, inativo, suspenso, verificado)

APLICAÇÃO PRÁTICA:
1. CollaborationState - gerencia estados de parcerias entre ONGs
2. ProjectState - controla ciclo de vida de projetos
3. UserState - estados do usuário e suas transições
4. UploadState - estados de processamento de arquivos
5. NotificationState - estados de notificações (enviada, lida, arquivada)

BENEFÍCIOS:
- Controle claro de transições de estado
- Comportamento específico para cada estado
- Facilita implementação de workflows
